#include <iostream>
#include <cstdint>
#include <vector>
#include <climits>
#ifdef MEASURETIME
#include <chrono>
#endif

#include "Week.h"
#include "Evaluator.h"

using namespace std;

vector<Evaluator*> evals;
size_t validCount;

void snapshot(const Week& table, const vector<int>& solution)
{
  validCount++;
  for (size_t i = 0; i < evals.size(); i++) {
    evals[i]->evaluate(table, solution);
  }
}

bool isConflict(const Week& table, const Week& section)
{
  for (int i = 0; i < WEEK_SIZE; i++)
    if (table.day[i] & section.day[i])
      return true;
  
  return false;
}

void addToTable(Week& table, const Week& section)
{
  for (int i = 0; i < WEEK_SIZE; i++)
    table.day[i] |= section.day[i];
}

void removeFromTable(Week& table, const Week& section)
{
  for (int i = 0; i < WEEK_SIZE; i++)
    table.day[i] ^= section.day[i];
}

void recurse (Week& table, vector<int>& solution, const vector<vector<Week>>& components, size_t depth = 0)
{

  if (depth == components.size())
  {
    snapshot(table, solution);
    return;
  }

  size_t n = components[depth].size();
  for (size_t i = 0; i < n; i++)
  {
    if (!isConflict(table, components[depth][i]))
    {
      solution[depth] = i;
      addToTable(table, components[depth][i]);
      recurse (table, solution, components, depth+1);
      removeFromTable(table, components[depth][i]);
    }
  }
}

/**
Input is of the form:
<num_components> <num_sections> 5x<day_bitmap>
**/

int main (int argc, char** argv)
{
  #ifdef MEASURETIME
  std::cout << argc << std::endl;
  std::vector<std::string> arguments = {"program", "5","39","0","0","24","0","0","0","6","0","0","0","0","0","0","50331648","0","0","1536","96","0","0","0","768","393216","12288","3","50331648","96","0","48","0","0","24576","0","24","0","0","3","786432","0","0","0","196608","0","0","3","0","0","0","192","0","384","0","0","0","0","25165824","0","3145728","12288","0","768","0","0","12582912","0","3072","25165824","0","0","0","48","0","3072","402653184","0","24","0","98304","0","768","12582912","0","0","0","0","196608","0","0","0","0","48","48","0","0","25165824","0","50331648","0","0","0","0","384","0","393216","0","0","0","0","12","25165824","0","0","0","0","98304","0","0","196608","0","0","48","786432","48","0","0","0","393216","0","0","24","0","100663296","0","393216","402653184","0","0","786432","786432","12582912","100663296","0","0","0","0","0","0","0","0","0","25165824","24576","0","96","0","0","0","48","49152","0","0","6","0","1572864","0","0","0","393216","48","98304","0","0","6","0","0","0","0","0","393216","196608","0","25165824","49152","402653184","768","0","0","50331648","0","0","0","96","0","0","0","39","0","0","0","0","0","0","24","192","201326592","0","3","0","0","0","0","0","49152","0","0","196608","0","6","0","0","0","0","0","24","0","0","0","0","0","0","384","0","0","384","6291456","402653184","0","6","0","50331648","0","0","0","3072","0","0","0","0","0","0","48","384","0","0","0","0","0","393216","0","0","24","0","0","100663296","0","201326592","50331648","6144","0","201326592","0","0","0","0","0","0","0","0","24","3145728","96","402653184","0","0","0","0","0","0","0","0","96","393216","0","201326592","12","196608","48","100663296","0","0","0","393216","0","0","0","24","6","1572864","3","100663296","0","0","0","0","0","0","0","0","0","0","0","0","48","1572864","12288","0","0","48","0","6144","6144","0","0","6","0","0","25165824","12","0","0","0","0","0","0","12288","0","0","384","393216","0","6291456","0","3072","0","0","0","48","0","0","0","0","768","0","0","96","0","0","0","25165824","0","3","0","0","0","0","0","0","0","192","0","6144","0","12582912","196608","0","6291456","0","0","0","0","0","39","0","402653184","768","0","768","0","0","96","0","6","100663296","98304","0","402653184","12582912","0","1572864","0","6144","0","0","0","0","0","49152","0","201326592","0","0","0","0","0","0","0","0","0","0","0","0","0","201326592","0","768","0","0","384","402653184","6291456","0","384","0","0","0","196608","201326592","0","0","12582912","6291456","0","50331648","0","3","0","0","0","100663296","12","12288","0","0","0","0","0","98304","0","3072","0","0","3072","786432","6144","0","0","192","0","0","0","0","0","0","0","0","0","0","24576","0","49152","0","768","0","0","0","0","12582912","0","0","24576","402653184","0","0","0","0","192","12","3","96","0","0","12582912","0","0","192","25165824","25165824","0","0","0","786432","100663296","24576","0","0","0","0","0","0","0","0","0","0","0","0","0","12582912","0","0","0","48","0","0","0","0","0","0","0","98304","0","3","0","0","100663296","1572864","0","1536","6","49152","0","0","402653184","0","0","25165824","0","0","0","0","0","0","0","100663296","402653184","0","0","0","0","6291456","393216","100663296","0","0","24576","201326592","1536","0","39","0","0","0","196608","0","402653184","3145728","0","3072","0","0","0","0","0","0","0","0","192","786432","12582912","0","0","1536","0","0","0","0","786432","0","0","0","25165824","0","0","24","0","0","0","0","0","49152","0","12582912","0","12288","0","6144","0","0","0","0","0","0","1536","0","384","6","0","384","384","0","0","0","0","3","0","0","0","12582912","100663296","98304","6144","25165824","3145728","384","0","0","0","196608","0","0","0","0","0","6144","100663296","0","24","0","0","0","0","0","0","0","393216","0","0","3072","768","0","0","0","0","0","192","0","0","0","384","0","0","0","48","0","0","0","0","0","0","0","0","24576","0","24576","0","0","25165824","0","0","0","0","0","12","0","0","0","0","96","0","768","50331648","0","0","100663296","0","24576","402653184","6","0","0","6144","0","0","0","0","0","0","196608","0","0","0","3145728","12288","393216","6","0","0","0","48","0","0","0","0","0","0","6144","0","0","12582912","0","0","100663296","0","0","0","768","0","0","3072","1536","192","0","0","0","39","0","0","0","96","0","49152","0","0","0","0","384","0","196608","96","0","0","0","0","0","0","201326592","1536","25165824","0","0","0","6","0","24576","12288","196608","0","0","0","0","0","0","768","0","0","0","0","0","0","192","0","0","0","0","0","0","0","0","0","12288","393216","0","0","0","0","0","0","0","0","0","0","0","100663296","25165824","0","12","0","0","0","192","0","0","0","0","12288","384","0","0","0","0","196608","1536","0","0","100663296","50331648","0","12","0","0","0","49152","0","0","0","0","98304","0","0","0","0","0","1572864","0","0","12288","0","0","0","0","0","0","50331648","12","0","0","0","24576","0","3","0","25165824","0","1572864","0","0","0","0","0","0","0","0","0","0","25165824","0","24576","50331648","768","0","201326592","96","0","0","3145728","0","0","0","0","0","0","0","25165824","0","0","48","0","0","0","0","0","0","192","0","0","201326592","192","0","98304","24576","0","0","0","0","0","0","201326592","0","0","0","0","0","0","0","0","0","0","0","100663296","0", "end"};

  std::vector<char*> argvVec;
  for (const auto& arg : arguments)
      argvVec.push_back((char*)arg.data());
  // argvVec.push_back((char*)std::string(NULL).data());

  argc = argvVec.size()-1;
  argv = argvVec.data();
  std::cout << argc << std::endl;
  
  std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();
  #endif
  
  int comp_size;
  vector<vector<Week>> components;
  
  /* get input from args */
  if (argc > 1) // input from arguments
  {
    int index = 0;
    comp_size = stoi(argv[++index]);
    components.resize(comp_size);
    
    // for every component
    for (int i = 0; i < comp_size; i++)
    {
      int sect_size = stoi(argv[++index]);
      
      // for every section
      for (int j = 0; j < sect_size; j++)
      {
        Week section;
        for (int k = 0; k < WEEK_SIZE; k++)
          section.day[k] = stoi(argv[++index]);
        components[i].push_back(section);
      }
    }
    
  }
  
  /* get input from stdin */
  else
  {
    cin >> comp_size;
    components.resize(comp_size);
    
    // for every component
    for (int i = 0; i < comp_size; i++)
    {
      int sect_size;
      cin >> sect_size;
      
      // for every section
      for (int j = 0; j < sect_size; j++)
      {
        Week section;
        for (int k = 0; k < WEEK_SIZE; k++)
          cin >> section.day[k];
        components[i].push_back(section);
      }
    }
  }
  
  evals = Evaluator::createEvaluators(5); // number signifies top k desired timetables to be stored, per Evaluator
  Week table;
  vector<int> solution(comp_size);
  recurse(table, solution, components);

  // Output is in the format <idname> <num_timetables> comp_size*<section-idx>...
  cout << "info " << to_string(validCount) << endl;
  for (size_t i = 0; i < evals.size(); i++) {
    cout << evals[i]->toString() << endl;
  }
  
  #ifdef MEASURETIME
  std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
  std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::milliseconds>(end - begin).count() << "[ms]" << std::endl;
  #endif
  
  return 0;
}
